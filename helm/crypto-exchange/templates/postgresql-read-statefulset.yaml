{{- if .Values.postgresql.read.enabled }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "crypto-exchange.postgresql.read.fullname" . }}
  labels:
    {{- include "crypto-exchange.labels" . | nindent 4 }}
    app.kubernetes.io/component: postgresql-read
spec:
  serviceName: {{ include "crypto-exchange.postgresql.read.fullname" . }}
  replicas: {{ .Values.postgresql.read.replicaCount }}
  selector:
    matchLabels:
      {{- include "crypto-exchange.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: postgresql-read
  template:
    metadata:
      labels:
        {{- include "crypto-exchange.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: postgresql-read
    spec:
      initContainers:
      - name: init-replica
        image: "{{ .Values.postgresql.read.image.repository }}:{{ .Values.postgresql.read.image.tag }}"
        command:
        - /bin/sh
        - -c
        - |
          if [ -f /var/lib/postgresql/data/pgdata/PG_VERSION ]; then
            echo "Data directory exists, skipping basebackup"
            exit 0
          fi
          
          echo "Waiting for primary to be ready..."
          until pg_isready -h {{ include "crypto-exchange.postgresql.write.fullname" . }}-0.{{ include "crypto-exchange.postgresql.write.fullname" . }} -U {{ .Values.postgresql.write.username }}; do
            echo "Waiting..."
            sleep 2
          done
          
          echo "Creating base backup from primary..."
          mkdir -p /var/lib/postgresql/data/pgdata
          pg_basebackup -h {{ include "crypto-exchange.postgresql.write.fullname" . }}-0.{{ include "crypto-exchange.postgresql.write.fullname" . }} \
                        -D /var/lib/postgresql/data/pgdata \
                        -U {{ .Values.postgresql.write.username }} \
                        -v -P -R
          
          echo "Base backup complete"
        env:
        - name: PGPASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: POSTGRES_PASSWORD
        volumeMounts:
        {{- if .Values.postgresql.read.persistence.enabled }}
        - name: data
          mountPath: /var/lib/postgresql/data
        {{- else }}
        - name: data
          mountPath: /var/lib/postgresql/data
        {{- end }}
      containers:
      - name: postgresql
        image: "{{ .Values.postgresql.read.image.repository }}:{{ .Values.postgresql.read.image.tag }}"
        imagePullPolicy: IfNotPresent
        ports:
        - name: postgresql
          containerPort: {{ .Values.postgresql.read.port }}
          protocol: TCP
        env:
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: POSTGRES_DB
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: POSTGRES_PASSWORD
        - name: PGDATA
          value: /var/lib/postgresql/data/pgdata
        volumeMounts:
        {{- if .Values.postgresql.read.persistence.enabled }}
        - name: data
          mountPath: /var/lib/postgresql/data
        {{- end }}
        livenessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U {{ .Values.postgresql.write.username }}
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          exec:
            command:
            - /bin/sh
            - -c
            - pg_isready -U {{ .Values.postgresql.write.username }}
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        resources:
          {{- toYaml .Values.postgresql.read.resources | nindent 10 }}
      {{- if not .Values.postgresql.read.persistence.enabled }}
      volumes:
      - name: data
        emptyDir: {}
      {{- end }}
  {{- if .Values.postgresql.read.persistence.enabled }}
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes:
      - ReadWriteOnce
      {{- if .Values.postgresql.read.persistence.storageClass }}
      storageClassName: {{ .Values.postgresql.read.persistence.storageClass }}
      {{- end }}
      resources:
        requests:
          storage: {{ .Values.postgresql.read.persistence.size }}
  {{- end }}
{{- end }}
