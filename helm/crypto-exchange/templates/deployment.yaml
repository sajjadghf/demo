apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "crypto-exchange.fullname" . }}
  labels:
    {{- include "crypto-exchange.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "crypto-exchange.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: django
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret: {{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "crypto-exchange.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: django
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "crypto-exchange.serviceAccountName" . }}
      initContainers:
      - name: init-db
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        command:
        - /bin/sh
        - -c
        - |
          set -e
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h {{ include "crypto-exchange.postgresql.write.fullname" . }} -U {{ .Values.postgresql.write.username }} -d {{ .Values.postgresql.write.database }}; do
            echo "Waiting for database..."
            sleep 2
          done
          echo "Running migrations..."
          python manage.py migrate --noinput
          echo "Database initialization complete!"
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-django
              key: SECRET_KEY
        - name: DEBUG
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-django
              key: DEBUG
        - name: ALLOWED_HOSTS
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-django
              key: ALLOWED_HOSTS
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_PASSWORD
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_PORT
      containers:
      - name: {{ .Chart.Name }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: 8000
          protocol: TCP
        env:
        - name: SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-django
              key: SECRET_KEY
        - name: DEBUG
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-django
              key: DEBUG
        - name: ALLOWED_HOSTS
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-django
              key: ALLOWED_HOSTS
        - name: DATABASE_NAME
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_NAME
        - name: DATABASE_USER
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_USER
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_PASSWORD
        - name: DATABASE_HOST
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_HOST
        - name: DATABASE_PORT
          valueFrom:
            secretKeyRef:
              name: {{ include "crypto-exchange.fullname" . }}-postgresql
              key: DATABASE_PORT
        volumeMounts:
        {{- if .Values.persistence.enabled }}
        - name: media
          mountPath: /app/media
        {{- end }}
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
      volumes:
      {{- if .Values.persistence.enabled }}
      - name: media
        persistentVolumeClaim:
          claimName: {{ include "crypto-exchange.fullname" . }}-media
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
